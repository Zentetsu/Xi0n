#ifndef DEF_ROBOT
#define DEF_ROBOT

/*!
 * \file Robot.h
 * \brief Robot structure's
 * \author MORANT Thbiaut
 */

#include "Arduino.h"

#include "./ControlLed.h"
#include "./Sensor.h"
#include "./Mobility.h"
#include "./HeadServo.h"


class Robot {
	public:
		/*!
		 *  \brief Constructor
		 *
		 *  Constructor of the Robot Class'
		 *
		 *  \param init_motorL_Pin1 : first pin of the left motor 
		 *  \param init_motorL_Pin2 : second pin of the left motor
		 *  \param init_enableL_Pin : pin to start or stop the left motor
		 *  \param init_motorR_Pin1 : first pin of the right motor 
		 *  \param init_motorR_Pin2 : second pin of the right motor
		 *  \param init_enableR_Pin : pin to start or stop the right motor
		 *	\param init_InfraRedSensor_Pin : pin of the InfraRed Sensor
		 *	\param init_echo_Pin : pin used to receive inforamtion from Ultrason
		 *	\param init_trigger_Pin : pin used to send informotion to Ultrason
		 *	\param new_ServoMotor_Pin : pin to control the Servo Motor
		 */
		Robot(int init_motorL_Pin1, int init_motorL_Pin2, int init_enableL_Pin, int init_motorR_Pin1, int init_motorR_Pin2, int init_enableR_Pin, int init_InfraRedSensor_Pin, int init_echo_Pin, int init_trigger_Pin, int new_ServoMotor_Pin);
		
		/*!
		 *  \brief Destructor
		 *
		 *  Destructor of the Robot Class'
		 */
		~Robot();


		/*!
		 *  \brief Control the new direction and the new speed of the Robot
		 *
		 *  change the state of the deplacement of the robot and set the new speed
		 *
		 *  \param direction_M1 : the new direction of the left motor
		 *  \param direction_M2 : the new direction of the right motor
		 *  \param speed_M1 : the new speed of the left motor
		 *  \param speed_M2 : the new speed of the right motor
		 */
		void deplacemnt(int direction_M1, int direction_M2, int speed_M1, int speed_M2);

		/*!
		 *  \brief return the distance between an object and the robot
		 *
		 *  this distance is generated by the ultrason
		 *
		 *  \return the distance
		 */
		float getDistanceUltrasion();

		/*!
		 *  \brief return the distance between an object and the robot
		 *
		 *  this distance is generated by the InfraRed sensor
		 *
		 *  \return the distance
		 */
		float getDistanceInfraRedSensor();

		/*!
		 *  \brief change the position of the servo motor
		 *
		 *  set the new value
		 *
		 *  \param new_position : the new position of the servo motor
		 */
		void setHeadPosition(int new_position);

		/*!
		 *  \brief return the current position of the servo motor
		 *
		 *  get the current value
		 *
		 *  \return the position of the servo motor
		 */
		int getHeadPosition();

	private:
		Communication *communication;/*!< object used in communication between robot and the IHM*/
		ControlLed *controlLed;/*!< object used to control led*/
		Mobility *mobility;/*!< object used to control the robot*/
		Sensor *sensor;/*!< object used to get information from the sensor*/
		HeadServo *headServo;/*!< object used to control the servo motor*/
		
};

#endif